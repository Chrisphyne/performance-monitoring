"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/*
  The MIT License
  
  Copyright (c) 2017-2019 EclipseSource Munich
  https://github.com/eclipsesource/jsonforms
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/
var cloneDeep_1 = tslib_1.__importDefault(require("lodash/cloneDeep"));
var set_1 = tslib_1.__importDefault(require("lodash/set"));
var get_1 = tslib_1.__importDefault(require("lodash/get"));
var filter_1 = tslib_1.__importDefault(require("lodash/filter"));
var isEqual_1 = tslib_1.__importDefault(require("lodash/isEqual"));
var isFunction_1 = tslib_1.__importDefault(require("lodash/isFunction"));
var actions_1 = require("../actions");
var validator_1 = require("../util/validator");
var validate = function (validator, data) {
    var valid = validator(data);
    if (valid) {
        return [];
    }
    return validator.errors;
};
exports.sanitizeErrors = function (validator, data) {
    if (validator === alwaysValid) {
        return [];
    }
    return validate(validator, data).map(function (error) {
        error.dataPath = error.dataPath.replace(/\//g, '.').substr(1);
        return error;
    });
};
var alwaysValid = function () { return true; };
var initState = {
    data: {},
    schema: {},
    uischema: undefined,
    errors: [],
    validator: alwaysValid,
    ajv: undefined,
    refParserOptions: undefined,
    validationMode: 'ValidateAndShow'
};
var reuseAjvForSchema = function (ajv, schema) {
    if (schema.hasOwnProperty('id') || schema.hasOwnProperty('$id')) {
        ajv.removeSchema(schema);
    }
    return ajv;
};
var getOrCreateAjv = function (state, action) {
    if (action) {
        if (hasAjvOption(action.options)) {
            // options object with ajv
            return action.options.ajv;
        }
        else if (action.options !== undefined &&
            !hasRefParserOption(action.options)) {
            // it is not an option object => should be ajv itself => check for compile function
            if (isFunction_1.default(action.options.compile)) {
                return action.options;
            }
        }
    }
    if (state.ajv) {
        return (action === null || action === void 0 ? void 0 : action.schema) ? reuseAjvForSchema(state.ajv, action.schema)
            : state.ajv;
    }
    return validator_1.createAjv();
};
var getRefParserOptions = function (state, action) {
    if (action && hasRefParserOption(action.options)) {
        return action.options.refParserOptions;
    }
    return state.refParserOptions;
};
var hasRefParserOption = function (option) {
    if (option) {
        return option.refParserOptions !== undefined;
    }
    return false;
};
var hasAjvOption = function (option) {
    if (option) {
        return option.ajv !== undefined;
    }
    return false;
};
var getValidationMode = function (state, action) {
    if (action && hasValidationModeOption(action.options)) {
        return action.options.validationMode;
    }
    return state.validationMode;
};
var hasValidationModeOption = function (option) {
    if (option) {
        return option.validationMode !== undefined;
    }
    return false;
};
exports.coreReducer = function (state, action) {
    if (state === void 0) { state = initState; }
    switch (action.type) {
        case actions_1.INIT: {
            var thisAjv = getOrCreateAjv(state, action);
            var o = getRefParserOptions(state, action);
            var validationMode = getValidationMode(state, action);
            var v = validationMode === 'NoValidation' ? alwaysValid : thisAjv.compile(action.schema);
            var e = exports.sanitizeErrors(v, action.data);
            return tslib_1.__assign(tslib_1.__assign({}, state), { data: action.data, schema: action.schema, uischema: action.uischema, errors: e, validator: v, ajv: thisAjv, refParserOptions: o, validationMode: validationMode });
        }
        case actions_1.SET_AJV: {
            var currentAjv = action.ajv;
            var validator = state.validationMode === 'NoValidation' ? alwaysValid : currentAjv.compile(state.schema);
            var errors = exports.sanitizeErrors(validator, state.data);
            return tslib_1.__assign(tslib_1.__assign({}, state), { validator: validator,
                errors: errors });
        }
        case actions_1.SET_SCHEMA: {
            var needsNewValidator = action.schema && state.ajv && state.validationMode !== 'NoValidation';
            var v = needsNewValidator
                ? reuseAjvForSchema(state.ajv, action.schema).compile(action.schema)
                : state.validator;
            return tslib_1.__assign(tslib_1.__assign({}, state), { validator: v, schema: action.schema });
        }
        case actions_1.SET_UISCHEMA: {
            return tslib_1.__assign(tslib_1.__assign({}, state), { uischema: action.uischema });
        }
        case actions_1.UPDATE_DATA: {
            if (action.path === undefined || action.path === null) {
                return state;
            }
            else if (action.path === '') {
                // empty path is ok
                var result = action.updater(cloneDeep_1.default(state.data));
                var errors = exports.sanitizeErrors(state.validator, result);
                return tslib_1.__assign(tslib_1.__assign({}, state), { data: result, errors: errors });
            }
            else {
                var oldData = get_1.default(state.data, action.path);
                var newData = action.updater(cloneDeep_1.default(oldData));
                var newState = set_1.default(state.data === undefined ? {} : cloneDeep_1.default(state.data), action.path, newData);
                var errors = exports.sanitizeErrors(state.validator, newState);
                return tslib_1.__assign(tslib_1.__assign({}, state), { data: newState, errors: errors });
            }
        }
        case actions_1.UPDATE_ERRORS: {
            return tslib_1.__assign(tslib_1.__assign({}, state), { errors: action.errors });
        }
        case actions_1.SET_VALIDATION_MODE: {
            if (state.validationMode === action.validationMode) {
                return state;
            }
            if (action.validationMode === 'NoValidation') {
                var errors = exports.sanitizeErrors(alwaysValid, state.data);
                return tslib_1.__assign(tslib_1.__assign({}, state), { validator: alwaysValid, errors: errors, validationMode: action.validationMode });
            }
            if (state.validationMode === 'NoValidation') {
                var validator = reuseAjvForSchema(state.ajv, state.schema).compile(state.schema);
                var errors = exports.sanitizeErrors(validator, state.data);
                return tslib_1.__assign(tslib_1.__assign({}, state), { validator: validator,
                    errors: errors, validationMode: action.validationMode });
            }
            return tslib_1.__assign(tslib_1.__assign({}, state), { validationMode: action.validationMode });
        }
        default:
            return state;
    }
};
exports.extractData = function (state) { return get_1.default(state, 'data'); };
exports.extractSchema = function (state) { return get_1.default(state, 'schema'); };
exports.extractUiSchema = function (state) { return get_1.default(state, 'uischema'); };
exports.extractAjv = function (state) { return get_1.default(state, 'ajv'); };
exports.errorsAt = function (instancePath, schema, matchPath) { return function (errors) {
    var combinatorPaths = filter_1.default(errors, function (error) { return error.keyword === 'oneOf' || error.keyword === 'anyOf'; }).map(function (error) { return error.dataPath; });
    return filter_1.default(errors, function (error) {
        var result = matchPath(error.dataPath);
        if (combinatorPaths.findIndex(function (p) { return instancePath.startsWith(p); }) !== -1) {
            result = result && isEqual_1.default(error.parentSchema, schema);
        }
        return result;
    });
}; };
var getErrorsAt = function (instancePath, schema, matchPath) { return function (state) {
    return exports.errorsAt(instancePath, schema, matchPath)(state.validationMode === 'ValidateAndHide' ? [] : state.errors);
}; };
exports.errorAt = function (instancePath, schema) {
    return getErrorsAt(instancePath, schema, function (path) { return path === instancePath; });
};
exports.subErrorsAt = function (instancePath, schema) {
    return getErrorsAt(instancePath, schema, function (path) { return path.startsWith(instancePath); });
};
exports.extractRefParserOptions = function (state) {
    return get_1.default(state, 'refParserOptions');
};
//# sourceMappingURL=core.js.map